@page
@model IndexModel
@{
    ViewData["Title"] = "Client";
}

@section Scripts {
    <script src="https://cdnjs.cloudflare.com/ajax/libs/microsoft-signalr/8.0.7/signalr.min.js"></script>

    <script>
        const connection = new signalR.HubConnectionBuilder()
            .withUrl("http://localhost:5268/webrtc-signal")
            .build();

        const remoteVideo = document.getElementById('remoteVideo');
        const peerConnection = new RTCPeerConnection();
        var trackReceived = false;

        connection.on("ReceiveOffer", offer => {
            console.log("Received offer:", offer);
            trackReceived = false;
            peerConnection.setRemoteDescription(new RTCSessionDescription(JSON.parse(offer)))
                .then(() => peerConnection.createAnswer())
                .then(answer => peerConnection.setLocalDescription(answer))
                .then(() => connection.invoke("SendAnswer", JSON.stringify(peerConnection.localDescription)))
                .catch(error => console.error("Error handling offer:", error));
        });

        connection.on("ReceiveIceCandidate", candidate => {
            console.log("Received ICE candidate:", candidate);
            peerConnection.addIceCandidate(new RTCIceCandidate(JSON.parse(candidate)))
                .catch(error => console.error("Error adding ICE candidate:", error));
        });

        peerConnection.onicecandidate = event => {
            if (event.candidate) {
                console.log("Sending ICE candidate:", event.candidate);
                connection.invoke("SendIceCandidate", JSON.stringify(event.candidate))
                    .catch(error => console.error("Error sending ICE candidate:", error));
            }
        };

        peerConnection.ontrack = event => {
            console.log("Received remote track:", event.streams[0]);
            if (!trackReceived)
            {
                remoteVideo.srcObject = event.streams[0];
                trackReceived = true;
            }
        };

        $(document).ready(async function () {
            try {
                await connection.start();
                console.log("SignalR connection established.");
            } catch (error) {
                console.error("Error establishing SignalR connection:", error);
            }
        });
    </script>
}

<div class="text-center">
    <h1 class="display-4">WebRTC Client</h1>
    <video id="remoteVideo" width="620" height="480" controls playsinline crossorigin></video>
</div>
